* COMMENT  About Re-review -*- mode: org; -*-
#+TITLE:     org.org
#+AUTHOR:    Gunter Liszewski (bs)
#+EMAIL:     glisze@linkenshell.org
#+DATE:      2014-01-15 Wed
#+DESCRIPTION: Org-mode re-visit, and literate, all, in an evening
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
* RE-re-view and Literate Org-organisating
** Code Blocks

This is about literate coding. About addressing the machine, as well
as the human. Text is 'tangled' to address the machine. Addressing the
human reader's understanding can be eased by 'weaving' the text.

*** An ECMAscript Example

An coding style sometimes seen uses an anonymous function to enclose
the code. This reduces the amount of name contamination of the global,
or pre-existing context.

Object and Functions in ECMAscript are used synonymously. A function object
is a basis to use for building and extending objects.

#+BEGIN_SRC js +n
  // A namespace enclosure
  var w = (function () {
      var w = function () {};
      return w;
  })()
#+END_SRC
*** Object Principles: resuse, and extend

#+BEGIN_SRC js +n
    w.extend = function (O, extension) {
	for (var p in extension)
	    O[p] = extension[p];
	};
#+END_SRC

*** Here is one from the org-mode guide

#+srcname abcd.el
#+BEGIN_SRC emacs-lisp -n
  (+ 1 2 3)
#+END_SRC

Now check out the [[http://orgmode.org/manual/Working-With-Source-Code.html#Working-With-Source-Code][Org-Mode Documentation]].

** Tangling

** Weaving

** Templates

#+BEGIN_EXAMPLE -n
C-c '   mode switch to work with sample
C-c C-v e  evaluate, execute
< s TAB    insert a template to make a script block
#+END_EXAMPLE

* Here is one example to use the MathJax


\[
\begin{equation}
x=\sqrt{q^2+3y}
\end{equation}
\]
